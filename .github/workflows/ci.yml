name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  file-size-check:
    name: File Size Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Create reports directory
        run: |
          mkdir -p reports/ci
      - name: Run file size analysis
        run: |
          poetry run python scripts/analyze_file_sizes.py --threshold 300 --output reports/ci/file_size_report.json --ci-mode
      - name: Upload file size report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: file-size-report
          path: reports/ci/file_size_report.json

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: file-size-check
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Run pre-commit hooks
        run: |
          poetry run pre-commit install
          poetry run pre-commit run --all-files

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Run unit tests with coverage
        run: |
          poetry run python scripts/run_tests.py --unit-tests --coverage --min-coverage 80
      - name: Quality gate check
        run: |
          echo "🚪 執行品質門檻檢查..."
          poetry run python scripts/quality_gate_check.py --min-pylint-score 8.5 --min-coverage 80 --max-file-lines 300
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./results/tests_*/coverage_unit.xml
          fail_ci_if_error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Run integration tests
        run: |
          poetry run python scripts/run_tests.py --integration-tests

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Run end-to-end tests
        run: |
          poetry run python scripts/run_tests.py --e2e-tests

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Create reports directory
        run: |
          mkdir -p tests/security/reports
          mkdir -p tests/performance/reports
      - name: Run Bandit security scan
        run: |
          poetry run bandit -r src/ -f json -o tests/security/reports/bandit-report.json --config .bandit
        continue-on-error: true
      - name: Run Safety vulnerability scan
        run: |
          poetry run safety check --json > tests/security/reports/safety-report.json
        continue-on-error: true
      - name: Run security tests
        run: |
          poetry run python scripts/run_security_tests.py
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: tests/security/reports/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: security-tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Create reports directory
        run: |
          mkdir -p tests/performance/reports
      - name: Run performance tests
        run: |
          poetry run python scripts/run_performance_tests.py
      - name: Run performance benchmarks
        run: |
          poetry run python -m pytest tests/performance/test_api_benchmarks.py --benchmark-only --benchmark-json=tests/performance/reports/benchmark-results.json -v
        continue-on-error: true
      - name: Run performance regression test
        run: |
          poetry run python scripts/run_performance_regression.py --no-fail-on-regression
        continue-on-error: true
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: tests/performance/reports/
