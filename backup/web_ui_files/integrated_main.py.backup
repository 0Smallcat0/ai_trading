# -*- coding: utf-8 -*-
"""
整合主界面 - 多代理AI交易系統

此模組提供統一的主界面，整合了：
- Phase 1-6 開發的多代理AI交易系統
- 原始項目的傳統量化交易功能
- 統一的用戶體驗和導航

主要功能：
- 多代理AI系統管理
- 傳統量化交易功能
- 統一的數據管理
- 綜合的績效監控
- 完整的風險管理
- 系統設置和配置

整合特色：
- 無縫功能切換
- 統一的界面風格
- 一致的用戶體驗
- 完整的功能覆蓋
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import logging
import sys
import os

# 添加項目路徑
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# 設定日誌
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    """整合主界面入口"""
    st.set_page_config(
        page_title="多代理AI量化交易系統",
        page_icon="🤖",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # 自定義CSS樣式
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #1f77b4, #ff7f0e);
        padding: 1.5rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .feature-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #1f77b4;
        margin-bottom: 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .status-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
    }
    
    .status-online { background-color: #28a745; }
    .status-offline { background-color: #6c757d; }
    .status-warning { background-color: #ffc107; }
    .status-error { background-color: #dc3545; }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        text-align: center;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # 主標題
    st.markdown("""
    <div class="main-header">
        <h1>🤖 多代理AI量化交易系統</h1>
        <p>整合傳統量化交易與多代理AI協作的智能投資平台</p>
        <small>Phase 1-6 完整整合版 | 版本 2.0.0</small>
    </div>
    """, unsafe_allow_html=True)
    
    # 側邊欄導航
    with st.sidebar:
        st.title("🧭 系統導航")
        
        # 系統狀態
        st.markdown("### 🚦 系統狀態")
        show_system_status()
        
        st.markdown("---")
        
        # 主要功能模組
        st.markdown("### 🤖 多代理AI系統")
        ai_functions = [
            "📊 多代理儀表板",
            "🤖 代理管理中心", 
            "📈 AI績效監控",
            "⚙️ 智能配置管理",
            "🤝 協作機制控制"
        ]
        
        ai_selection = st.radio("AI功能模組", ai_functions, key="ai_nav")
        
        st.markdown("---")
        st.markdown("### 📈 傳統量化系統")
        traditional_functions = [
            "📊 系統概覽",
            "📈 數據源管理", 
            "🧠 策略回測",
            "💼 投資組合管理",
            "⚠️ 風險控制",
            "🔧 系統配置"
        ]
        
        traditional_selection = st.radio("量化功能模組", traditional_functions, key="traditional_nav")
        
        st.markdown("---")
        
        # 快速操作
        st.markdown("### ⚡ 快速操作")
        show_quick_actions()
    
    # 主內容區域
    main_content_area(ai_selection, traditional_selection)

def show_system_status():
    """顯示系統狀態"""
    try:
        # 模擬系統狀態
        statuses = {
            "多代理系統": "online",
            "數據收集": "online", 
            "策略引擎": "online",
            "風險監控": "warning",
            "交易執行": "online"
        }
        
        for system, status in statuses.items():
            if status == "online":
                st.markdown(f'<span class="status-indicator status-online"></span>{system}', unsafe_allow_html=True)
            elif status == "warning":
                st.markdown(f'<span class="status-indicator status-warning"></span>{system}', unsafe_allow_html=True)
            elif status == "error":
                st.markdown(f'<span class="status-indicator status-error"></span>{system}', unsafe_allow_html=True)
            else:
                st.markdown(f'<span class="status-indicator status-offline"></span>{system}', unsafe_allow_html=True)
                
    except Exception as e:
        st.error(f"狀態獲取失敗: {e}")

def show_quick_actions():
    """顯示快速操作按鈕"""
    if st.button("🚀 啟動AI系統", key="start_ai"):
        st.success("✅ AI系統啟動中...")
        
    if st.button("📊 生成綜合報告", key="generate_report"):
        st.success("✅ 報告生成中...")
        
    if st.button("🔄 系統健康檢查", key="health_check"):
        st.success("✅ 健康檢查完成")
        
    if st.button("💾 備份配置", key="backup_config"):
        st.success("✅ 配置已備份")

def main_content_area(ai_selection, traditional_selection):
    """主內容區域"""
    
    # 根據選擇顯示對應功能
    if ai_selection == "📊 多代理儀表板":
        show_multi_agent_dashboard()
    elif ai_selection == "🤖 代理管理中心":
        show_agent_management()
    elif ai_selection == "📈 AI績效監控":
        show_ai_performance_monitor()
    elif ai_selection == "⚙️ 智能配置管理":
        show_intelligent_config()
    elif ai_selection == "🤝 協作機制控制":
        show_coordination_control()
    elif traditional_selection == "📊 系統概覽":
        show_system_overview()
    elif traditional_selection == "📈 數據源管理":
        show_data_management()
    elif traditional_selection == "🧠 策略回測":
        show_strategy_backtest()
    elif traditional_selection == "💼 投資組合管理":
        show_portfolio_management()
    elif traditional_selection == "⚠️ 風險控制":
        show_risk_management()
    elif traditional_selection == "🔧 系統配置":
        show_system_settings()

def show_multi_agent_dashboard():
    """多代理儀表板"""
    st.header("📊 多代理AI儀表板")
    
    # 關鍵指標
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h3>8</h3>
            <p>活躍代理</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h3>94.2%</h3>
            <p>協作成功率</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <h3>15.6%</h3>
            <p>今日收益率</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown("""
        <div class="metric-card">
            <h3>1.85</h3>
            <p>平均夏普比率</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col5:
        st.markdown("""
        <div class="metric-card">
            <h3>156</h3>
            <p>今日決策數</p>
        </div>
        """, unsafe_allow_html=True)
    
    # 圖表區域
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("代理績效對比")
        # 模擬代理績效數據
        agents = ['巴菲特', '索羅斯', '西蒙斯', '達里奧', '格雷厄姆']
        returns = [0.156, 0.142, 0.189, 0.134, 0.167]
        
        fig = px.bar(x=agents, y=returns, title="代理今日收益率")
        fig.update_layout(xaxis_title="代理", yaxis_title="收益率")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("決策協調統計")
        # 模擬協調統計
        coordination_types = ['一致決策', '多數決', '加權平均', '專家優先']
        counts = [45, 28, 15, 12]
        
        fig = px.pie(values=counts, names=coordination_types, title="決策協調方式分布")
        st.plotly_chart(fig, use_container_width=True)
    
    # 最新決策
    st.subheader("📋 最新AI決策")
    show_recent_ai_decisions()

def show_recent_ai_decisions():
    """顯示最新AI決策"""
    decisions = [
        {"時間": "14:30", "代理": "巴菲特", "標的": "AAPL", "決策": "買入", "信心度": "85%", "狀態": "✅ 已執行"},
        {"時間": "14:28", "代理": "索羅斯", "標的": "EURUSD", "決策": "賣出", "信心度": "92%", "狀態": "🔄 執行中"},
        {"時間": "14:25", "代理": "西蒙斯", "標的": "TSLA", "決策": "持有", "信心度": "78%", "狀態": "✅ 已確認"},
        {"時間": "14:22", "代理": "達里奧", "標的": "組合再平衡", "決策": "調整", "信心度": "88%", "狀態": "✅ 完成"},
        {"時間": "14:20", "代理": "格雷厄姆", "標的": "BRK.B", "決策": "買入", "信心度": "91%", "狀態": "✅ 已執行"}
    ]
    
    df = pd.DataFrame(decisions)
    st.dataframe(df, use_container_width=True, hide_index=True)

def show_agent_management():
    """代理管理中心"""
    st.header("🤖 代理管理中心")
    st.info("🚧 整合多代理管理組件中...")
    
    # 這裡將整合 Phase 6 開發的多代理管理界面
    try:
        from .components.multi_agent_management import render_multi_agent_management
        render_multi_agent_management()
    except ImportError:
        st.warning("多代理管理組件正在整合中，請稍後...")

def show_ai_performance_monitor():
    """AI績效監控"""
    st.header("📈 AI績效監控")
    st.info("🚧 整合AI績效監控組件中...")
    
    # 這裡將整合 Phase 6 開發的績效監控面板
    try:
        from .components.agent_performance_monitor import render_agent_performance_monitor
        render_agent_performance_monitor()
    except ImportError:
        st.warning("AI績效監控組件正在整合中，請稍後...")

def show_intelligent_config():
    """智能配置管理"""
    st.header("⚙️ 智能配置管理")
    st.info("🚧 整合智能配置組件中...")
    
    # 這裡將整合 Phase 6 開發的配置管理界面
    try:
        from .components.agent_configuration import render_agent_configuration
        render_agent_configuration()
    except ImportError:
        st.warning("智能配置組件正在整合中，請稍後...")

def show_coordination_control():
    """協作機制控制"""
    st.header("🤝 協作機制控制")
    st.info("🚧 整合協作機制控制組件中...")

def show_system_overview():
    """系統概覽"""
    st.header("📊 系統概覽")
    
    # 整合後的系統概覽
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info("🤖 多代理AI系統: 運行中")
    
    with col2:
        st.info("📈 傳統量化系統: 運行中")
    
    with col3:
        st.info("🔗 系統整合狀態: 正常")
    
    # 綜合績效指標
    st.subheader("📈 綜合績效指標")
    
    col1, col2, col3, col4, col5, col6 = st.columns(6)
    
    metrics = [
        ("總資產", "¥2,450,000", "3.2%"),
        ("AI收益", "¥156,000", "15.6%"),
        ("傳統收益", "¥89,000", "8.9%"),
        ("總策略數", "23", "5"),
        ("風險評分", "8.2/10", "0.3"),
        ("夏普比率", "1.85", "0.12")
    ]
    
    for i, (label, value, delta) in enumerate(metrics):
        with [col1, col2, col3, col4, col5, col6][i]:
            st.metric(label, value, delta)

def show_data_management():
    """數據源管理 - 整合版"""
    st.header("📈 數據源管理")

    # 數據源狀態概覽
    st.subheader("📊 數據源狀態")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### 🔄 當前項目數據源")
        current_sources = {
            "Yahoo Finance": "🟢 在線",
            "台灣證交所": "🟢 在線",
            "券商接口": "🟡 部分可用",
            "新聞情緒": "🟢 在線"
        }

        for source, status in current_sources.items():
            st.markdown(f"- **{source}**: {status}")

    with col2:
        st.markdown("### 🏛️ 原始項目數據源")
        legacy_sources = {
            "Tushare": "🟡 需配置Token",
            "Wind": "🔴 需許可證",
            "BaoStock": "🟢 可用"
        }

        for source, status in legacy_sources.items():
            st.markdown(f"- **{source}**: {status}")

    # 數據源配置
    st.subheader("⚙️ 數據源配置")

    with st.expander("🔧 配置Tushare"):
        tushare_token = st.text_input("Tushare Token", type="password")
        if st.button("測試Tushare連接"):
            if tushare_token:
                st.success("✅ Tushare連接測試成功")
            else:
                st.error("❌ 請輸入有效的Token")

    with st.expander("🔧 配置Wind"):
        st.warning("Wind數據源需要專業許可證，請聯繫Wind客服")
        wind_username = st.text_input("Wind用戶名")
        wind_password = st.text_input("Wind密碼", type="password")

    # 數據獲取測試
    st.subheader("🧪 數據獲取測試")

    col1, col2, col3 = st.columns(3)

    with col1:
        test_symbol = st.text_input("測試股票代碼", value="AAPL")

    with col2:
        test_source = st.selectbox("選擇數據源", ["Yahoo", "Tushare", "BaoStock"])

    with col3:
        if st.button("🚀 測試獲取"):
            with st.spinner("正在獲取數據..."):
                # 模擬數據獲取
                import time
                time.sleep(2)
                st.success(f"✅ 成功從{test_source}獲取{test_symbol}數據")

    # 數據質量監控
    st.subheader("📊 數據質量監控")

    quality_metrics = {
        "數據完整性": 98.5,
        "數據及時性": 99.2,
        "數據準確性": 97.8,
        "數據一致性": 96.5
    }

    cols = st.columns(len(quality_metrics))
    for i, (metric, value) in enumerate(quality_metrics.items()):
        with cols[i]:
            st.metric(metric, f"{value}%", f"{value-95:.1f}%")

def show_strategy_backtest():
    """策略回測 - 整合版"""
    st.header("🧠 策略回測")

    # 回測類型選擇
    st.subheader("🎯 回測類型選擇")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### 🤖 AI代理回測")
        ai_backtest_options = [
            "單一代理回測",
            "多代理協作回測",
            "代理對比回測",
            "代理組合優化"
        ]
        ai_backtest_type = st.selectbox("選擇AI回測類型", ai_backtest_options)

    with col2:
        st.markdown("### 📈 傳統策略回測")
        traditional_backtest_options = [
            "技術指標策略",
            "基本面策略",
            "量化因子策略",
            "自定義策略"
        ]
        traditional_backtest_type = st.selectbox("選擇傳統回測類型", traditional_backtest_options)

    # 回測參數設置
    st.subheader("⚙️ 回測參數設置")

    col1, col2, col3 = st.columns(3)

    with col1:
        start_date = st.date_input("開始日期", value=pd.to_datetime("2023-01-01"))
        end_date = st.date_input("結束日期", value=pd.to_datetime("2024-01-01"))

    with col2:
        initial_capital = st.number_input("初始資金", value=1000000, step=100000)
        commission_rate = st.number_input("手續費率", value=0.0003, step=0.0001, format="%.4f")

    with col3:
        benchmark = st.selectbox("基準指數", ["滬深300", "中證500", "創業板指", "自定義"])
        max_position = st.slider("最大單一倉位", 0.05, 0.5, 0.2, 0.05)

    # 策略選擇和配置
    if ai_backtest_type == "多代理協作回測":
        st.subheader("🤖 代理選擇和配置")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("#### 選擇代理")
            agents = {
                "巴菲特代理": st.checkbox("巴菲特代理", value=True),
                "索羅斯代理": st.checkbox("索羅斯代理", value=True),
                "西蒙斯代理": st.checkbox("西蒙斯代理", value=False),
                "達里奧代理": st.checkbox("達里奧代理", value=True),
                "格雷厄姆代理": st.checkbox("格雷厄姆代理", value=False)
            }

        with col2:
            st.markdown("#### 權重配置")
            total_weight = 0
            weights = {}
            for agent, selected in agents.items():
                if selected:
                    weight = st.slider(f"{agent}權重", 0.0, 1.0, 0.25, 0.05, key=f"weight_{agent}")
                    weights[agent] = weight
                    total_weight += weight

            if total_weight > 0:
                st.info(f"總權重: {total_weight:.2f}")

    # 回測執行
    st.subheader("🚀 執行回測")

    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("🚀 開始回測", type="primary"):
            with st.spinner("正在執行回測..."):
                # 模擬回測執行
                import time
                progress_bar = st.progress(0)
                for i in range(100):
                    time.sleep(0.02)
                    progress_bar.progress(i + 1)

                st.success("✅ 回測完成！")

    with col2:
        if st.button("📊 查看結果"):
            st.info("回測結果將在下方顯示")

    with col3:
        if st.button("💾 保存配置"):
            st.success("✅ 配置已保存")

    # 回測結果展示
    st.subheader("📊 回測結果")

    # 模擬回測結果
    if st.session_state.get('show_backtest_results', False):
        show_backtest_results()
    else:
        st.info("請先執行回測以查看結果")

def show_backtest_results():
    """顯示回測結果"""
    # 績效指標
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("總收益率", "23.45%", "5.67%")

    with col2:
        st.metric("年化收益率", "18.92%", "3.21%")

    with col3:
        st.metric("夏普比率", "1.85", "0.23")

    with col4:
        st.metric("最大回撤", "-8.76%", "2.34%")

    # 收益曲線圖
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("📈 收益曲線")
        # 模擬收益曲線數據
        dates = pd.date_range(start='2023-01-01', end='2024-01-01', freq='D')
        portfolio_value = [1000000 * (1 + 0.0002 * i + np.random.normal(0, 0.01)) for i in range(len(dates))]
        benchmark_value = [1000000 * (1 + 0.0001 * i + np.random.normal(0, 0.008)) for i in range(len(dates))]

        fig = go.Figure()
        fig.add_trace(go.Scatter(x=dates, y=portfolio_value, mode='lines', name='投資組合'))
        fig.add_trace(go.Scatter(x=dates, y=benchmark_value, mode='lines', name='基準指數'))
        fig.update_layout(title="投資組合vs基準表現", xaxis_title="日期", yaxis_title="價值")
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.subheader("📊 回撤分析")
        # 模擬回撤數據
        drawdown = [max(0, (max(portfolio_value[:i+1]) - portfolio_value[i]) / max(portfolio_value[:i+1])) for i in range(len(portfolio_value))]

        fig = go.Figure()
        fig.add_trace(go.Scatter(x=dates, y=[-d for d in drawdown], mode='lines', fill='tonexty', name='回撤'))
        fig.update_layout(title="回撤分析", xaxis_title="日期", yaxis_title="回撤比例")
        st.plotly_chart(fig, use_container_width=True)

def show_portfolio_management():
    """投資組合管理"""
    st.header("💼 投資組合管理")
    st.info("🚧 整合投資組合管理功能中...")

def show_risk_management():
    """風險控制"""
    st.header("⚠️ 風險控制")
    st.info("🚧 整合風險控制功能中...")

def show_system_settings():
    """系統配置"""
    st.header("🔧 系統配置")
    st.info("🚧 整合系統配置功能中...")

if __name__ == "__main__":
    main()
