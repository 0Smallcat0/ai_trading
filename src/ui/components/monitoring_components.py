"""
Á≥ªÁµ±Áõ£ÊéßÁµÑ‰ª∂

Ê≠§Ê®°ÁµÑÊèê‰æõÁ≥ªÁµ±Áõ£ÊéßÁöÑÂêÑÁ®ÆÁµÑ‰ª∂ÔºåÂåÖÊã¨Ôºö
- Á≥ªÁµ±Ë≥áÊ∫êÁõ£ÊéßÁµÑ‰ª∂
- ‰∫§ÊòìÊïàËÉΩËøΩËπ§ÁµÑ‰ª∂
- Êó•Ë™åÁÆ°ÁêÜÁµÑ‰ª∂
- Ë≠¶Â†±Á≥ªÁµ±ÁµÑ‰ª∂
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
import psutil
import time

# Â∞éÂÖ•ÈüøÊáâÂºèË®≠Ë®àÁµÑ‰ª∂
from ..responsive import ResponsiveComponents, responsive_manager


class MonitoringComponents:
    """Á≥ªÁµ±Áõ£ÊéßÁµÑ‰ª∂È°û"""

    @staticmethod
    def system_resources_dashboard(resource_data: Dict[str, Any]) -> None:
        """
        Á≥ªÁµ±Ë≥áÊ∫êÁõ£ÊéßÂÑÄË°®Êùø

        Args:
            resource_data: Á≥ªÁµ±Ë≥áÊ∫êÊï∏Êìö
        """
        # Âü∫Êú¨Ë≥áÊ∫êÊåáÊ®ô
        resource_metrics = [
            {
                "title": "CPU ‰ΩøÁî®Áéá",
                "value": f"{resource_data.get('cpu_percent', 0):.1f}%",
                "status": MonitoringComponents._get_resource_status(
                    resource_data.get("cpu_percent", 0), 80, 90
                ),
                "icon": "üñ•Ô∏è",
            },
            {
                "title": "Ë®òÊÜ∂È´î‰ΩøÁî®Áéá",
                "value": f"{resource_data.get('memory_percent', 0):.1f}%",
                "status": MonitoringComponents._get_resource_status(
                    resource_data.get("memory_percent", 0), 80, 90
                ),
                "icon": "üíæ",
            },
            {
                "title": "Á£ÅÁ¢ü‰ΩøÁî®Áéá",
                "value": f"{resource_data.get('disk_percent', 0):.1f}%",
                "status": MonitoringComponents._get_resource_status(
                    resource_data.get("disk_percent", 0), 85, 95
                ),
                "icon": "üíø",
            },
            {
                "title": "Á∂≤Ë∑ØÂª∂ÈÅ≤",
                "value": f"{resource_data.get('network_latency', 0):.0f}ms",
                "status": MonitoringComponents._get_latency_status(
                    resource_data.get("network_latency", 0)
                ),
                "icon": "üåê",
            },
        ]

        ResponsiveComponents.responsive_metric_cards(
            resource_metrics, desktop_cols=4, tablet_cols=2, mobile_cols=1
        )

        # Ë©≥Á¥∞Ë≥áÊ∫êË≥áË®ä
        st.subheader("Ë©≥Á¥∞Ë≥áÊ∫êË≥áË®ä")

        detailed_metrics = [
            {
                "title": "ÂèØÁî®Ë®òÊÜ∂È´î",
                "value": f"{resource_data.get('memory_available', 0) / 1024**3:.1f} GB",
                "status": "normal",
                "icon": "üìä",
            },
            {
                "title": "Á£ÅÁ¢üÂèØÁî®Á©∫Èñì",
                "value": f"{resource_data.get('disk_free', 0) / 1024**3:.1f} GB",
                "status": "normal",
                "icon": "üíΩ",
            },
            {
                "title": "Á∂≤Ë∑Ø‰∏äÂÇ≥",
                "value": f"{resource_data.get('network_sent', 0) / 1024**2:.1f} MB/s",
                "status": "normal",
                "icon": "üì§",
            },
            {
                "title": "Á∂≤Ë∑Ø‰∏ãËºâ",
                "value": f"{resource_data.get('network_recv', 0) / 1024**2:.1f} MB/s",
                "status": "normal",
                "icon": "üì•",
            },
        ]

        ResponsiveComponents.responsive_metric_cards(
            detailed_metrics, desktop_cols=4, tablet_cols=2, mobile_cols=1
        )

    @staticmethod
    def _get_resource_status(
        value: float, warning_threshold: float, error_threshold: float
    ) -> str:
        """Áç≤ÂèñË≥áÊ∫êÁãÄÊÖã"""
        if value >= error_threshold:
            return "error"
        elif value >= warning_threshold:
            return "warning"
        else:
            return "success"

    @staticmethod
    def _get_latency_status(latency: float) -> str:
        """Áç≤ÂèñÂª∂ÈÅ≤ÁãÄÊÖã"""
        if latency > 100:
            return "error"
        elif latency > 50:
            return "warning"
        else:
            return "success"

    @staticmethod
    def performance_tracking_dashboard(performance_data: Dict[str, Any]) -> None:
        """
        ‰∫§ÊòìÊïàËÉΩËøΩËπ§ÂÑÄË°®Êùø

        Args:
            performance_data: ÊïàËÉΩÊï∏Êìö
        """
        # ÊïàËÉΩÊåáÊ®ô
        perf_metrics = [
            {
                "title": "Ë®ÇÂñÆÂª∂ÈÅ≤",
                "value": f"{performance_data.get('order_latency', 0):.1f}ms",
                "status": MonitoringComponents._get_latency_status(
                    performance_data.get("order_latency", 0)
                ),
                "icon": "‚ö°",
            },
            {
                "title": "Êàê‰∫§Áéá",
                "value": f"{performance_data.get('fill_rate', 0):.1f}%",
                "status": (
                    "success"
                    if performance_data.get("fill_rate", 0) > 95
                    else "warning"
                ),
                "icon": "üéØ",
            },
            {
                "title": "Á≥ªÁµ±ÂêûÂêêÈáè",
                "value": f"{performance_data.get('throughput', 0):.0f} TPS",
                "status": (
                    "success"
                    if performance_data.get("throughput", 0) > 100
                    else "warning"
                ),
                "icon": "üöÄ",
            },
            {
                "title": "API ÂõûÊáâÊôÇÈñì",
                "value": f"{performance_data.get('api_response_time', 0):.0f}ms",
                "status": MonitoringComponents._get_latency_status(
                    performance_data.get("api_response_time", 0)
                ),
                "icon": "üîó",
            },
        ]

        ResponsiveComponents.responsive_metric_cards(
            perf_metrics, desktop_cols=4, tablet_cols=2, mobile_cols=1
        )

        # ÊïàËÉΩË∂®Âã¢ÂúñË°®
        MonitoringComponents._render_performance_charts(performance_data)

    @staticmethod
    def _render_performance_charts(performance_data: Dict[str, Any]) -> None:
        """Ê∏≤ÊüìÊïàËÉΩÂúñË°®"""
        # ‰ΩøÁî®ÈüøÊáâÂºèÂàó‰ΩàÂ±Ä
        cols = responsive_manager.create_responsive_columns(
            desktop_cols=2, tablet_cols=1, mobile_cols=1
        )

        with cols[0]:
            # Âª∂ÈÅ≤Ë∂®Âã¢Âúñ
            MonitoringComponents._render_latency_trend()

        with cols[1 % len(cols)]:
            # ÂêûÂêêÈáèË∂®Âã¢Âúñ
            MonitoringComponents._render_throughput_trend()

    @staticmethod
    def _render_latency_trend() -> None:
        """Ê∏≤ÊüìÂª∂ÈÅ≤Ë∂®Âã¢Âúñ"""
        # ÁîüÊàêÊ®°Êì¨Âª∂ÈÅ≤Êï∏Êìö
        times = pd.date_range(end=datetime.now(), periods=60, freq="T")
        latencies = np.random.normal(25, 10, 60)
        latencies = np.clip(latencies, 5, 100)  # ÈôêÂà∂Âú®ÂêàÁêÜÁØÑÂúçÂÖß

        fig = go.Figure()

        fig.add_trace(
            go.Scatter(
                x=times,
                y=latencies,
                mode="lines+markers",
                name="Ë®ÇÂñÆÂª∂ÈÅ≤",
                line=dict(color="blue", width=2),
                marker=dict(size=4),
            )
        )

        # Ê∑ªÂä†Ë≠¶ÊàíÁ∑ö
        fig.add_hline(
            y=50, line_dash="dash", line_color="orange", annotation_text="Ë≠¶ÂëäÁ∑ö (50ms)"
        )
        fig.add_hline(
            y=100, line_dash="dash", line_color="red", annotation_text="Âç±Èö™Á∑ö (100ms)"
        )

        height = responsive_manager.get_chart_height(300)
        fig.update_layout(
            title="Ë®ÇÂñÆÂª∂ÈÅ≤Ë∂®Âã¢",
            xaxis_title="ÊôÇÈñì",
            yaxis_title="Âª∂ÈÅ≤ (ms)",
            height=height,
            hovermode="x unified",
        )

        st.plotly_chart(fig, use_container_width=True)

    @staticmethod
    def _render_throughput_trend() -> None:
        """Ê∏≤ÊüìÂêûÂêêÈáèË∂®Âã¢Âúñ"""
        # ÁîüÊàêÊ®°Êì¨ÂêûÂêêÈáèÊï∏Êìö
        times = pd.date_range(end=datetime.now(), periods=60, freq="T")
        throughput = np.random.normal(150, 30, 60)
        throughput = np.clip(throughput, 50, 300)  # ÈôêÂà∂Âú®ÂêàÁêÜÁØÑÂúçÂÖß

        fig = go.Figure()

        fig.add_trace(
            go.Scatter(
                x=times,
                y=throughput,
                mode="lines+markers",
                name="Á≥ªÁµ±ÂêûÂêêÈáè",
                line=dict(color="green", width=2),
                marker=dict(size=4),
                fill="tonexty",
            )
        )

        height = responsive_manager.get_chart_height(300)
        fig.update_layout(
            title="Á≥ªÁµ±ÂêûÂêêÈáèË∂®Âã¢",
            xaxis_title="ÊôÇÈñì",
            yaxis_title="ÂêûÂêêÈáè (TPS)",
            height=height,
            hovermode="x unified",
        )

        st.plotly_chart(fig, use_container_width=True)

    @staticmethod
    def log_management_panel(logs: List[Dict[str, Any]]) -> None:
        """
        Êó•Ë™åÁÆ°ÁêÜÈù¢Êùø

        Args:
            logs: Êó•Ë™åÂàóË°®
        """
        if not logs:
            st.info("Ê≤íÊúâÊó•Ë™åË®òÈåÑ")
            return

        # Êó•Ë™åÁµ±Ë®à
        log_stats = MonitoringComponents._calculate_log_stats(logs)

        stats_metrics = [
            {
                "title": "Á∏ΩÊó•Ë™åÊï∏",
                "value": str(log_stats["total_logs"]),
                "status": "normal",
                "icon": "üìù",
            },
            {
                "title": "ÈåØË™§Êó•Ë™å",
                "value": str(log_stats["error_logs"]),
                "status": "error" if log_stats["error_logs"] > 0 else "success",
                "icon": "‚ùå",
            },
            {
                "title": "Ë≠¶ÂëäÊó•Ë™å",
                "value": str(log_stats["warning_logs"]),
                "status": "warning" if log_stats["warning_logs"] > 0 else "success",
                "icon": "‚ö†Ô∏è",
            },
            {
                "title": "‰ªäÊó•Êñ∞Â¢û",
                "value": str(log_stats["today_logs"]),
                "status": "normal",
                "icon": "üìÖ",
            },
        ]

        ResponsiveComponents.responsive_metric_cards(
            stats_metrics, desktop_cols=4, tablet_cols=2, mobile_cols=1
        )

        # Êó•Ë™åÁØ©ÈÅ∏
        st.subheader("Êó•Ë™åÁØ©ÈÅ∏")

        cols = responsive_manager.create_responsive_columns(
            desktop_cols=4, tablet_cols=2, mobile_cols=1
        )

        with cols[0]:
            level_filter = st.selectbox(
                "Êó•Ë™åÁ≠âÁ¥ö", ["ÂÖ®ÈÉ®", "INFO", "WARNING", "ERROR", "DEBUG"]
            )

        with cols[1 % len(cols)]:
            module_filter = st.selectbox(
                "Ê®°ÁµÑ", ["ÂÖ®ÈÉ®", "trading", "risk", "data", "api"]
            )

        with cols[2 % len(cols)]:
            start_time = st.time_input(
                "ÈñãÂßãÊôÇÈñì", datetime.now().replace(hour=0, minute=0)
            )

        with cols[3 % len(cols)]:
            end_time = st.time_input("ÁµêÊùüÊôÇÈñì", datetime.now())

        # ÁØ©ÈÅ∏Êó•Ë™å
        filtered_logs = MonitoringComponents._filter_logs(
            logs, level_filter, module_filter, start_time, end_time
        )

        # Êó•Ë™åË°®Ê†º
        st.subheader("Êó•Ë™åË®òÈåÑ")

        if filtered_logs:
            df = pd.DataFrame(filtered_logs)

            # Ê∑ªÂä†È°èËâ≤Ê®ôË®ò
            def style_log_level(val):
                if val == "ERROR":
                    return "background-color: #f8d7da"
                elif val == "WARNING":
                    return "background-color: #fff3cd"
                elif val == "INFO":
                    return "background-color: #d4edda"
                return ""

            if "level" in df.columns:
                styled_df = df.style.applymap(style_log_level, subset=["level"])
                ResponsiveComponents.responsive_dataframe(styled_df, title="Á≥ªÁµ±Êó•Ë™å")
            else:
                ResponsiveComponents.responsive_dataframe(df, title="Á≥ªÁµ±Êó•Ë™å")
        else:
            st.info("Ê≤íÊúâÁ¨¶ÂêàÊ¢ù‰ª∂ÁöÑÊó•Ë™å")

    @staticmethod
    def _calculate_log_stats(logs: List[Dict[str, Any]]) -> Dict[str, int]:
        """Ë®àÁÆóÊó•Ë™åÁµ±Ë®à"""
        stats = {
            "total_logs": len(logs),
            "error_logs": 0,
            "warning_logs": 0,
            "today_logs": 0,
        }

        today = datetime.now().strftime("%Y-%m-%d")

        for log in logs:
            level = log.get("level", "")
            timestamp = log.get("timestamp", "")

            if level == "ERROR":
                stats["error_logs"] += 1
            elif level == "WARNING":
                stats["warning_logs"] += 1

            if timestamp.startswith(today):
                stats["today_logs"] += 1

        return stats

    @staticmethod
    def _filter_logs(
        logs: List[Dict[str, Any]],
        level_filter: str,
        module_filter: str,
        start_time: time,
        end_time: time,
    ) -> List[Dict[str, Any]]:
        """ÁØ©ÈÅ∏Êó•Ë™å"""
        filtered = logs.copy()

        # Á≠âÁ¥öÁØ©ÈÅ∏
        if level_filter != "ÂÖ®ÈÉ®":
            filtered = [log for log in filtered if log.get("level") == level_filter]

        # Ê®°ÁµÑÁØ©ÈÅ∏
        if module_filter != "ÂÖ®ÈÉ®":
            filtered = [log for log in filtered if log.get("module") == module_filter]

        # ÊôÇÈñìÁØ©ÈÅ∏ÔºàÁ∞°ÂåñÂØ¶‰ΩúÔºâ
        # ÂØ¶ÈöõÊáâÁî®‰∏≠ÈúÄË¶ÅÊõ¥Ë§áÈõúÁöÑÊôÇÈñìËß£Êûê

        return filtered

    @staticmethod
    def alert_system_panel(alerts: List[Dict[str, Any]]) -> None:
        """
        Ë≠¶Â†±Á≥ªÁµ±Èù¢Êùø

        Args:
            alerts: Ë≠¶Â†±ÂàóË°®
        """
        if not alerts:
            st.info("Ê≤íÊúâÁ≥ªÁµ±Ë≠¶Â†±")
            return

        # Ë≠¶Â†±Áµ±Ë®à
        alert_stats = MonitoringComponents._calculate_alert_stats(alerts)

        stats_metrics = [
            {
                "title": "Á∏ΩË≠¶Â†±Êï∏",
                "value": str(alert_stats["total_alerts"]),
                "status": "normal",
                "icon": "üö®",
            },
            {
                "title": "Âö¥ÈáçË≠¶Â†±",
                "value": str(alert_stats["critical_alerts"]),
                "status": "error" if alert_stats["critical_alerts"] > 0 else "success",
                "icon": "üî¥",
            },
            {
                "title": "Êú™Á¢∫Ë™ç",
                "value": str(alert_stats["unacknowledged_alerts"]),
                "status": (
                    "warning" if alert_stats["unacknowledged_alerts"] > 0 else "success"
                ),
                "icon": "‚è≥",
            },
            {
                "title": "Â∑≤Ëß£Ê±∫",
                "value": str(alert_stats["resolved_alerts"]),
                "status": "success",
                "icon": "‚úÖ",
            },
        ]

        ResponsiveComponents.responsive_metric_cards(
            stats_metrics, desktop_cols=4, tablet_cols=2, mobile_cols=1
        )

        # Ë≠¶Â†±ÂàóË°®
        st.subheader("Ë≠¶Â†±Ë©≥ÊÉÖ")

        df = pd.DataFrame(alerts)
        if not df.empty:
            ResponsiveComponents.responsive_dataframe(df, title="Á≥ªÁµ±Ë≠¶Â†±")

        # Ë≠¶Â†±Êìç‰Ωú
        if alerts:
            st.subheader("Ë≠¶Â†±Êìç‰Ωú")

            cols = responsive_manager.create_responsive_columns(
                desktop_cols=3, tablet_cols=2, mobile_cols=1
            )

            with cols[0]:
                if st.button("‚úÖ Á¢∫Ë™çÊâÄÊúâË≠¶Â†±", use_container_width=True):
                    st.success("ÊâÄÊúâË≠¶Â†±Â∑≤Á¢∫Ë™ç")

            with cols[1 % len(cols)]:
                if st.button("üîï ÈùúÈü≥Ë≠¶Â†±", use_container_width=True):
                    st.info("Ë≠¶Â†±Â∑≤ÈùúÈü≥")

            with cols[2 % len(cols)]:
                if st.button("üóëÔ∏è Ê∏ÖÈô§Â∑≤Ëß£Ê±∫", use_container_width=True):
                    st.success("Â∑≤Ëß£Ê±∫ÁöÑË≠¶Â†±Â∑≤Ê∏ÖÈô§")

    @staticmethod
    def _calculate_alert_stats(alerts: List[Dict[str, Any]]) -> Dict[str, int]:
        """Ë®àÁÆóË≠¶Â†±Áµ±Ë®à"""
        stats = {
            "total_alerts": len(alerts),
            "critical_alerts": 0,
            "unacknowledged_alerts": 0,
            "resolved_alerts": 0,
        }

        for alert in alerts:
            severity = alert.get("severity", "")
            status = alert.get("status", "")
            acknowledged = alert.get("acknowledged", False)

            if severity == "critical":
                stats["critical_alerts"] += 1

            if not acknowledged:
                stats["unacknowledged_alerts"] += 1

            if status == "resolved":
                stats["resolved_alerts"] += 1

        return stats

    @staticmethod
    def health_report_generator(system_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        ÁîüÊàêÁ≥ªÁµ±ÂÅ•Â∫∑Â∫¶Â†±Âëä

        Args:
            system_data: Á≥ªÁµ±Êï∏Êìö

        Returns:
            ÂÅ•Â∫∑Â∫¶Â†±Âëä
        """
        # Ë®àÁÆóÂÅ•Â∫∑Â∫¶Ë©ïÂàÜ
        health_score = MonitoringComponents._calculate_health_score(system_data)

        # ÁîüÊàêÂª∫Ë≠∞
        recommendations = MonitoringComponents._generate_recommendations(system_data)

        # Á≥ªÁµ±ÁãÄÊÖã
        if health_score >= 90:
            status = "ÂÑ™ÁßÄ"
            status_color = "success"
        elif health_score >= 70:
            status = "ËâØÂ•Ω"
            status_color = "warning"
        else:
            status = "ÈúÄË¶ÅÈóúÊ≥®"
            status_color = "error"

        return {
            "health_score": health_score,
            "status": status,
            "status_color": status_color,
            "recommendations": recommendations,
            "generated_at": datetime.now().isoformat(),
        }

    @staticmethod
    def _calculate_health_score(system_data: Dict[str, Any]) -> int:
        """Ë®àÁÆóÁ≥ªÁµ±ÂÅ•Â∫∑Â∫¶Ë©ïÂàÜ"""
        score = 100

        # CPU ‰ΩøÁî®ÁéáÂΩ±Èüø
        cpu_usage = system_data.get("cpu_percent", 0)
        if cpu_usage > 90:
            score -= 20
        elif cpu_usage > 80:
            score -= 10

        # Ë®òÊÜ∂È´î‰ΩøÁî®ÁéáÂΩ±Èüø
        memory_usage = system_data.get("memory_percent", 0)
        if memory_usage > 90:
            score -= 20
        elif memory_usage > 80:
            score -= 10

        # Á∂≤Ë∑ØÂª∂ÈÅ≤ÂΩ±Èüø
        latency = system_data.get("network_latency", 0)
        if latency > 100:
            score -= 15
        elif latency > 50:
            score -= 5

        # ÈåØË™§ÁéáÂΩ±Èüø
        error_rate = system_data.get("error_rate", 0)
        if error_rate > 5:
            score -= 25
        elif error_rate > 1:
            score -= 10

        return max(0, score)

    @staticmethod
    def _generate_recommendations(system_data: Dict[str, Any]) -> List[str]:
        """ÁîüÊàêÁ≥ªÁµ±ÂÑ™ÂåñÂª∫Ë≠∞"""
        recommendations = []

        cpu_usage = system_data.get("cpu_percent", 0)
        memory_usage = system_data.get("memory_percent", 0)
        latency = system_data.get("network_latency", 0)

        if cpu_usage > 80:
            recommendations.append("CPU ‰ΩøÁî®ÁéáÈÅéÈ´òÔºåÂª∫Ë≠∞ÂÑ™ÂåñË®àÁÆóÂØÜÈõÜÂûã‰ªªÂãô")

        if memory_usage > 80:
            recommendations.append("Ë®òÊÜ∂È´î‰ΩøÁî®ÁéáÈÅéÈ´òÔºåÂª∫Ë≠∞Ê∏ÖÁêÜÁ∑©Â≠òÊàñÂ¢ûÂä†Ë®òÊÜ∂È´î")

        if latency > 50:
            recommendations.append("Á∂≤Ë∑ØÂª∂ÈÅ≤ËºÉÈ´òÔºåÂª∫Ë≠∞Ê™¢Êü•Á∂≤Ë∑ØÈÄ£Êé•ÊàñÂÑ™Âåñ API Ë™øÁî®")

        if not recommendations:
            recommendations.append("Á≥ªÁµ±ÈÅãË°åËâØÂ•ΩÔºåÁπºÁ∫å‰øùÊåÅ")

        return recommendations
