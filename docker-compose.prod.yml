# AI 股票自動交易系統 - 生產環境 Docker Compose 配置
# 版本: v1.0
# 最後更新: 2024-12-25

version: '3.8'

# =============================================================================
# 網路配置
# =============================================================================
networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# =============================================================================
# 存儲卷配置
# =============================================================================
volumes:
  # 應用程式數據
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai_trading/data
  
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai_trading/logs
  
  app_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai_trading/backups
  
  # 資料庫數據
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai_trading/postgres/data
  
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai_trading/postgres/backups
  
  # Redis 數據
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai_trading/redis/data
  
  # 監控數據
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai_trading/prometheus/data
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai_trading/grafana/data

# =============================================================================
# 服務定義
# =============================================================================
services:
  # 主應用服務 - Web UI
  app-ui:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: ai-trading:${VERSION:-latest}
    container_name: ai_trading_ui_prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_HOST=prometheus
      - GRAFANA_HOST=grafana
      - SECURE_MODE=true
    volumes:
      - app_data:/app/data:rw
      - app_logs:/app/logs:rw
      - app_backups:/app/backups:rw
    ports:
      - "8501:8501"
    networks:
      - trading_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.trading-ui.rule=Host(`trading.example.com`)"
      - "traefik.http.routers.trading-ui.tls=true"
      - "traefik.http.services.trading-ui.loadbalancer.server.port=8501"

  # API 服務
  app-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: ai-trading:${VERSION:-latest}
    container_name: ai_trading_api_prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - API_WORKERS=4
      - SECURE_MODE=true
    volumes:
      - app_data:/app/data:ro
      - app_logs:/app/logs:rw
    ports:
      - "8000:8000"
    networks:
      - trading_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    command: ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.trading-api.rule=Host(`api.trading.example.com`)"
      - "traefik.http.routers.trading-api.tls=true"
      - "traefik.http.services.trading-api.loadbalancer.server.port=8000"

  # PostgreSQL 資料庫
  postgres:
    image: postgres:15-alpine
    container_name: ai_trading_postgres_prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ai_trading}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - postgres_backups:/backups:rw
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    ports:
      - "5432:5432"
    networks:
      - trading_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ai_trading}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=mod
      -c log_min_duration_statement=1000
      -c log_connections=on
      -c log_disconnections=on

  # Redis 快取
  redis:
    image: redis:7-alpine
    container_name: ai_trading_redis_prod
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data:rw
      - ./config/redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}

  # Prometheus 監控
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_trading_prometheus_prod
    restart: unless-stopped
    user: "65534:65534"
    environment:
      - PROMETHEUS_RETENTION_TIME=30d
      - PROMETHEUS_RETENTION_SIZE=10GB
    volumes:
      - prometheus_data:/prometheus:rw
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/monitoring/rules:/etc/prometheus/rules:ro
    ports:
      - "9090:9090"
    networks:
      - trading_network
      - monitoring_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # Grafana 儀表板
  grafana:
    image: grafana/grafana:latest
    container_name: ai_trading_grafana_prod
    restart: unless-stopped
    user: "472:472"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
    volumes:
      - grafana_data:/var/lib/grafana:rw
      - ./config/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - monitoring_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: ai_trading_nginx_prod
    restart: unless-stopped
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - trading_network
    depends_on:
      - app-ui
      - app-api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # 日誌收集器
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: ai_trading_fluentd_prod
    restart: unless-stopped
    volumes:
      - ./config/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - app_logs:/var/log/app:ro
      - /var/log:/var/log/host:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - monitoring_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

# =============================================================================
# 擴展配置
# =============================================================================
x-logging: &default-logging
  driver: "fluentd"
  options:
    fluentd-address: "localhost:24224"
    tag: "docker.{{.Name}}"

# 應用所有服務的日誌配置
x-common-variables: &common-variables
  logging: *default-logging
